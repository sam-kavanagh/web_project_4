!function(){"use strict";var e={formSelector:".popup__form",inputSelector:".popup__input",inputTextError:"popup__input_has-error",inputVisibleError:"popup__text-error_visible",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disabled"};function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var n=function(){function e(t){var n,r,o=t.baseUrl,i=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=void 0,(n="debugger")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._baseUrl=o,this._headers=i}var n,r;return n=e,(r=[{key:"_handleServerResponse",value:function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}},{key:"getCardInfo",value:function(){return Promise.all([this.getCardList(),this.getUserInfo()])}},{key:"getUserInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._handleServerResponse)}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.description;return fetch("".concat(this._baseUrl,"/users/me "),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,description:n})}).then(this._handleServerResponse)}},{key:"getCardList",value:function(e){var t=e.text,n=e.link;return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify({text:t,link:n})}).then(this._handleServerResponse)}},{key:"addCard",value:function(e){var t=e.text,n=e.link;return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify({text:t,link:n})}).then(this._handleServerResponse)}},{key:"setCardLikes",value:function(){return fetch("".concat(this._baseUrl,"/cards/likes/cardId"),{headers:this._headers}).then(this._handleServerResponse)}},{key:"toggleCardLikeStatus",value:function(e,t){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:t?"PUT":"DELETE"}).then(this._handleServerResponse)}},{key:"setUserAvatar",value:function(e){var t=e.avatar;return fetch("".concat(this._baseUrl,"/users/me/avatar "),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:t})}).then(this._handleServerResponse)}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"}).then(this._handleServerResponse)}}])&&t(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}();function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(){this._items.forEach(this._renderer)}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&r(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t,n){var r=t.data,o=t.userId,i=t.handleCardClick,a=(t.handleLikesButton,t.handleTrashButton);!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._text=r.name,this._link=r.link,this._likes=r.likes,this._userId=o,this._cardId=cardId,this._ownerID=r.owner._id,this._handleCardClick=i,this._handleLikesButton=handleLikeButton,this._handleTrashButton=a,this._cardSelector=n}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".element__like-button").addEventListener("click",(function(t){e._handleLikesButton()})),this._element.querySelector(".element__trash-button").addEventListener("click",(function(t){e._handleTrashButton()})),this._element.querySelector(".element__image").addEventListener("click",(function(t){return e._handleCardClick({link:e._link,text:e._text})})),this.updateLikes()}},{key:"_handleLikes",value:function(){this._element.querySelector(".element__like-button").classList.toggle("element__like-button_full")}},{key:"_handleTrash",value:function(){this._element.remove(),this.element=null}},{key:"getView",value:function(){this._element=this._getTemplate(),this._setEventListeners();var e=this._element.querySelector(".element__image");return e.src=this._link,e.alt=this._text,this._element.querySelector(".element__title").textContent=this._text,this._element}},{key:"isLiked",value:function(){return!!this._likeButton.classList.contains(".element__like-button_full")}},{key:"updateLikes",value:function(){this._element.querySelector(".element__like-count").textContent=this._likes.length,this.isLiked()?this._element.querySelector(".element__like-button").classList.add(".element__like-button_full"):this._element.querySelector(".element__like-button").classList.remove(".element__like-button_full")}},{key:"setLikesInfo",value:function(e){this._likes=e.likes,this.updateLikes()}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("mousedown",(function(t){(t.target.classList.contains("popup_open")||t.target.classList.contains("popup__close-button"))&&e.close()}))}},{key:"open",value:function(){this._popupElement.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}}])&&s(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=f(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},p.apply(this,arguments)}function f(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}function d(e,t){return d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},d(e,t)}function h(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=y(r);if(o){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return h(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._imageElement=t._popupElement.querySelector(".popup__preview-image"),t._imageCaption=t._popupElement.querySelector(".popup__caption"),t}return t=a,(n=[{key:"open",value:function(e){this._imageElement.src=e.link,this._imageCaption.textContent=e.text,this._imageElement.alt=e.text,p(y(a.prototype),"open",this).call(this)}}])&&c(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(u);function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(){return b="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=k(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},b.apply(this,arguments)}function k(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=S(e)););return e}function g(e,t){return g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},g(e,t)}function E(e,t){if(t&&("object"===_(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function S(e){return S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},S(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&g(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=S(r);if(o){var n=S(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function a(e){var t,n=e.popupSelector,r=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._popupForm=t._popupElement.querySelector(".popup__form"),t._handleFormSubmit=r,t._inputList=t._popupElement.querySelectorAll(".popup__input"),t}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){return e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues()),e.close()})),b(S(a.prototype),"setEventListeners",this).call(this)}},{key:"close",value:function(){this._popupForm.reset(),b(S(a.prototype),"close",this).call(this)}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(u);function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t){var n=t.userNameSelector,r=t.userDescriptionSelector,o=t.userAvatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userNameElement=document.querySelector(n),this._userDescriptionElement=document.querySelector(r),this._userAvatarElement=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._userNameElement.textContent,description:this._userDescriptionElement.textContent,avatar:this._userAvatarElement.style.backgroundImage}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.description,r=e.avatar;t&&(this._userNameElement.textContent=data.Name),n&&(this._userDescriptionElement.textContent=data.Description),r&&(this._userAvatarElement.src=r)}}])&&L(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var I=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._inputSelector=t.inputSelector,this._inputTextError=t.inputTextError,this._inputVisibleError=t.inputVisibleError,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._formEl=n}var t,n;return t=e,(n=[{key:"_addInputError",value:function(e){e.classList.add(this._inputTextError)}},{key:"_removeInputError",value:function(e){e.classList.remove(this._inputTextError)}},{key:"_showMessageError",value:function(e){var t=this._formEl.querySelector("#".concat(e.id,"-error"));t.textContent=e.validationMessage,t.classList.add(this._inputVisibleError)}},{key:"_hideMessageError",value:function(e){var t=this._formEl.querySelector("#".concat(e.id,"-error"));t.textContent=" ",t.classList.remove(this._inputVisibleError)}},{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_checkInputValidity",value:function(e){e.validity.valid?(this._hideMessageError(e),this._removeInputError(e)):(this._showMessageError(e),this._addInputError(e))}},{key:"_toggleButton",value:function(){this._hasInvalidInput(this._inputList)?(this._buttonEl.disabled=!0,this._buttonEl.classList.add(this._inactiveButtonClass)):(this._buttonEl.classList.remove(this._inactiveButtonClass),this._buttonEl.disabled=!1)}},{key:"_setEventListeners",value:function(){var e,t=this;this._inputList=function(e){if(Array.isArray(e))return C(e)}(e=this._formEl.querySelectorAll(this._inputSelector))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return C(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?C(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),this._buttonEl=this._formEl.querySelector(this._submitButtonSelector),this._inputList.forEach((function(e){e.addEventListener("input",(function(){t._checkInputValidity(e),t._toggleButton()}))})),this.resetValidation()}},{key:"resetValidation",value:function(){var e=this;this._inputList.forEach((function(t){e._hideMessageError(t),e._removeInputError(t)})),this._toggleButton()}},{key:"enableValidation",value:function(){this._formEl.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&j(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function P(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var x=document.querySelector(".profile__edit-button"),q=document.querySelector(".profile__add-button"),T=(document.querySelector("#card-template"),document.querySelector(".elements"),document.querySelector("#name-input"),document.querySelector("#description-input"),document.querySelector("#profile-avatar-button")),A=new n({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"816a5952-0b40-4365-b524-9e18859b6d37","Content-Type":"application/json"}});Promise.all([A.getUserInfo(),A.getCardList()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return P(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?P(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1],a=o.name,s=o.description,u=o.avatar,l=o._id;userData.setUserInfo({name:a,description:s,_id:l,avatar:u}),renderInitialCards.renderItems(i)})).catch((function(e){return console.error("Error: ".concat(e))}));var R=new m("#popup-preview"),B=new o({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:function(e){B.addItem(function(e){return new a({data:{name:e.name||e.title,link:e.link},handleCardClick:function(e){R.open(e)}},"#card-template").getView()}(e))}},".elements"),U=new O({userNameSelector:"#edit-card-name",userDescriptionSelector:"#edit-card-description",userAvatarSelector:".profile__image"}),V=new w({popupSelector:"#edit-profile-popup",handleFormSubmit:function(e){U.setUserInfo(e)}}),D=new w({popupSelector:"#profile-avatar-popup",handleFormSubmit:function(e){renderLoading("#profile-avatar-popup",!0),A.updateAvatar({avatar:e.avatar}).then((function(e){U.setUserInfo({avatar:e.avatar}),updateAvatarPopup.closeModal()})).catch((function(e){return console.log("Error changing user avatar: ".concat(res))})).finally((function(){renderLoading("#profile-avatar-popup")}))}});D.setEventListeners();var N=new w({popupSelector:"#add-card-popup",handleFormSubmit:function(e){renderLoading("#add-card-popup",!0),A.addCard(e).then((function(e){cardList.addItem(createCard(e)),N.close()})).catch((function(e){return"Error adding new card: ".concat(e)})).finally((function(e){e.err,renderLoading("#add-card-popup")}))}}),M=new I(e,document.querySelector("#edit-profile-form")),F=new I(e,document.querySelector("#new-card-form")),J=new I(e,document.querySelector("#profile-avatar-form"));x.addEventListener("click",(function(e){var t=U.getUserInfo();document.querySelector("#name-input").setAttribute("value",t.name),document.querySelector("#description-input").setAttribute("value",t.description),V.open(t)})),q.addEventListener("click",(function(e){N.open(),F.resetValidation()})),T.addEventListener("click",(function(e){D.open(),editAvatarValidator.resetValidation()})),B.renderItems(),R.setEventListeners(),V.setEventListeners(),N.setEventListeners(),M.enableValidation(),F.enableValidation(),J.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,